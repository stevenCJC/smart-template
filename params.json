{"name":"Smart-template","tagline":"if your project contains underscore and requirejs,and you also use the template function provided by underscore,you will need it.","body":"# smart-template`<iframe src=\"http://www.baidu.com/\"></iframe>`\r\n\r\n> if your subject contains underscore and requirejs,and you also use the template function provided by underscore,you will need it.\r\n\r\n\r\n## Getting Started\r\nThis plugin requires Grunt `~0.4.1`\r\n\r\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\r\n\r\n```shell\r\nnpm install smart-template --save-dev\r\n```\r\n\r\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\r\n\r\n```js\r\ngrunt.loadNpmTasks('smart-template');\r\n```\r\n\r\n## The \"smart_template\" task\r\n\r\n\r\n### Options\r\n\r\n#### options.prefix\r\nType: `String`\r\nDefault value: `''`\r\n\r\nA string value that is used as the prefix a module name.\r\n\r\n### Usage Examples\r\n\r\n#### Default Options\r\nIn this example, the default options are used to do something with whatever. So if the `testing` file has the content `Testing` and the `123` file had the content `1 2 3`, the generated result would be `Testing, 1 2 3.`\r\n\r\n```js\r\ngrunt.initConfig({\r\n  smart_template: {\r\n    options: {\r\n\t\tprefix:'',\r\n\t},\r\n    files: {\r\n      'dest/tpl.js': ['src/tpl.html'],\r\n    },\r\n  },\r\n})\r\n```\r\nThe content of compiled files just like a requirejs module . \r\n\r\nThe name of module is from the filename without ext of the html file . \r\n\r\n```js\r\ndefine( moduleName, [], function(data){ \r\n\t... \r\n});\r\n```\r\n#### Custom Options\r\nIn this example, custom options are used to do something else with whatever else. So if the `testing` file has the content `Testing` and the `123` file had the content `1 2 3`, the generated result in this case would be `Testing: 1 2 3 !!!`\r\n\r\n```js\r\ngrunt.initConfig({\r\n  smart_template: {\r\n    options: {\r\n      prefix: 'TPL_',\r\n    },\r\n    doIt_: {\r\n      'dest/tpl.js': [''src/tpl_1.html', 'src/tpl_2.html'],\r\n    },\r\n\tdoIt:{\r\n\t\texpand: true,\r\n\t\tcwd: 'src_dev/js/t/',\r\n\t\tsrc: ['*.html'],\r\n\t\tdest: 'src/js/t/',\r\n\t\text: '.js',\r\n\t}\r\n  },\r\n  \r\n})\r\n```\r\n\r\n## Contributing\r\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\r\n\r\n## Release History\r\n_(Nothing yet)_\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}